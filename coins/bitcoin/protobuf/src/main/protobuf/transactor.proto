syntax = "proto3";

import "operation.proto";

package pb.v1;

option java_package = "co.ledger.lama.bitcoin.transactor.protobuf";

service BitcoinTransactorService {
  rpc ValidateAddresses(ValidateAddressesRequest) returns (ValidateAddressesResponse) {}
  rpc CreateTransaction(CreateTransactionRequest) returns (CreateTransactionResponse) {}
  rpc GenerateSignatures(GenerateSignaturesRequest) returns (GenerateSignaturesResponse) {}
  rpc BroadcastTransaction(BroadcastTransactionRequest) returns (RawTransaction) {}
}

message ValidateAddressesRequest {
  string coin_id = 1;
  repeated string addresses = 2;
}

message ValidateAddressesResponse {

  message InvalidAddress {
    string address = 1;
    string invalid_reason = 2;
  }

  message ValidAddress {
    string address = 1;
  }

  message ValidationResult {
    oneof result {
      InvalidAddress invalid = 1;
      ValidAddress valid = 2;
    }
  }

  repeated ValidationResult results = 1;
}

enum CoinSelector {
  DEPTH_FIRST = 0;
  OPTIMIZE_SIZE = 1;
  MERGE_OUTPUTS = 2;
}

message CreateTransactionRequest {
  bytes account_id = 1;
  bytes keychain_id = 2;
  CoinSelector coin_selection = 3;
  repeated PrepareTxOutput outputs = 4;
  string coin_id = 5;
  FeeLevel fee_level = 6;
  int64 custom_fee_per_kb = 7;
  int32 max_utxos = 8;
}

message CreateTransactionResponse {
  string hex = 1;
  string hash = 2;
  string witness_hash = 3;
  repeated Utxo utxos = 4;
  repeated PrepareTxOutput outputs = 5;
  int64 fee = 6;
  int64 fee_per_kb = 7;
}

message RawTransaction {
  string hex = 1;
  string hash = 2;
  string witness_hash = 3;
}

message Derivation {
  repeated uint32 path = 9;
}

message GenerateSignaturesRequest {
  RawTransaction raw_transaction = 1;
  repeated Utxo utxos = 2;
  string priv_key = 3;
}

message GenerateSignaturesResponse {
  repeated bytes signatures = 1;
}

message BroadcastTransactionRequest {
  bytes keychain_id = 1;
  string coin_id = 2;
  RawTransaction raw_transaction = 3;
  repeated Derivation derivations = 4;
  repeated bytes signatures = 5;
}

message PrepareTxOutput {
  string address = 1;
  string value = 2;
  // change is not null only if this output is for a change address
  Derivation change = 3;
}

enum FeeLevel {
  SLOW = 0;
  NORMAL = 1;
  FAST = 3;
}
